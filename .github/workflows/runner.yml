name: Runner
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pytest:
    name: Run tests with pytest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8','3.9','3.10']

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up FFMPEG
      run: |
        sudo apt install -y ffmpeg

    # Pip Install
    - name: Pip Install
      id: pip
      run: |
        python -m pip install -U pip
        python -m pip install pytest
        result=$(python -m pip install .)
        result="${result//'%'/'%25'}"
        result="${result//$'\n'/'%0A'}"
        result="${result//$'\r'/'%0D'}"
        echo "::set-output name=pip_result::$result"

      continue-on-error: true

    # check python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    # Create Credentials
    - name: Create Credentials
      run: |
        echo -n '$SECRET_INFO' > credentials/template_credentials.json
        envsubst < credentials/template_credentials.json > credentials/credentials.json
      env:
        SECRET_INFO: ${{ secrets.SECRET_INFO }}

    # Running Pytest
    - name: Pytest
      id: pytest
      run: |
        result=$(python -m pytest)
        result="${result//'%'/'%25'}"
        result="${result//$'\n'/'%0A'}"
        result="${result//$'\r'/'%0D'}" 
        echo "::set-output name=pytest_result::$result"
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PYTEST: "[Pytest ${{ matrix.python-version }}]\n${{ steps.pytest.outputs.pytest_result }}"
        PIP: "[Pip Install]\n${{ steps.pip.outputs.pip_result }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Pip install ‚öôÔ∏è \`${{ steps.pip.outcome }}\`

          <details><summary>Show Pip Install Detail</summary>

          \`\`\`\n
          ${process.env.PIP}
          \`\`\`

          </details>

          #### Pytest ${{ matrix.python-version }} üìñ \`${{ steps.pytest.outcome }}\`

          <details><summary>Show Pytest Detail</summary>

          \`\`\`\n
          ${process.env.PYTEST}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Pip Install Status
      if: steps.pip.outcome == 'failure'
      run: exit 1

    - name: Pytest Status
      if: steps.pytest.outcome == 'failure'
      run: exit 1
